"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnterpriseReasonTransformer = void 0;
const common_1 = require("@nestjs/common");
const google_recaptcha_enterprise_reason_1 = require("../enums/google-recaptcha-enterprise-reason");
const error_code_1 = require("../enums/error-code");
let EnterpriseReasonTransformer = class EnterpriseReasonTransformer {
    transform(errCode) {
        switch (errCode) {
            case google_recaptcha_enterprise_reason_1.GoogleRecaptchaEnterpriseReason.BrowserError:
                return error_code_1.ErrorCode.BrowserError;
            case google_recaptcha_enterprise_reason_1.GoogleRecaptchaEnterpriseReason.SiteMismatch:
                return error_code_1.ErrorCode.SiteMismatch;
            case google_recaptcha_enterprise_reason_1.GoogleRecaptchaEnterpriseReason.Expired:
            case google_recaptcha_enterprise_reason_1.GoogleRecaptchaEnterpriseReason.Dupe:
                return error_code_1.ErrorCode.TimeoutOrDuplicate;
            case google_recaptcha_enterprise_reason_1.GoogleRecaptchaEnterpriseReason.UnknownInvalidReason:
            case google_recaptcha_enterprise_reason_1.GoogleRecaptchaEnterpriseReason.Malformed:
                return error_code_1.ErrorCode.InvalidInputResponse;
            case google_recaptcha_enterprise_reason_1.GoogleRecaptchaEnterpriseReason.Missing:
                return error_code_1.ErrorCode.MissingInputResponse;
            case google_recaptcha_enterprise_reason_1.GoogleRecaptchaEnterpriseReason.InvalidReasonUnspecified:
                return null;
            default:
                return error_code_1.ErrorCode.UnknownError;
        }
    }
};
EnterpriseReasonTransformer = __decorate([
    (0, common_1.Injectable)()
], EnterpriseReasonTransformer);
exports.EnterpriseReasonTransformer = EnterpriseReasonTransformer;
