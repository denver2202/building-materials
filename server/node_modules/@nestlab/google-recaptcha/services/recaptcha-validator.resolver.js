"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecaptchaValidatorResolver = void 0;
const common_1 = require("@nestjs/common");
const google_recaptcha_validator_1 = require("./validators/google-recaptcha.validator");
const google_recaptcha_enterprise_validator_1 = require("./validators/google-recaptcha-enterprise.validator");
const recaptcha_config_ref_1 = require("../models/recaptcha-config-ref");
let RecaptchaValidatorResolver = class RecaptchaValidatorResolver {
    constructor(configRef, googleRecaptchaValidator, googleRecaptchaEnterpriseValidator) {
        this.configRef = configRef;
        this.googleRecaptchaValidator = googleRecaptchaValidator;
        this.googleRecaptchaEnterpriseValidator = googleRecaptchaEnterpriseValidator;
    }
    resolve() {
        const configValue = this.configRef.valueOf;
        if (configValue.secretKey) {
            return this.googleRecaptchaValidator;
        }
        if (Object.keys(configValue.enterprise || {}).length) {
            return this.googleRecaptchaEnterpriseValidator;
        }
        throw new Error('Cannot resolve google recaptcha validator');
    }
};
RecaptchaValidatorResolver = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [recaptcha_config_ref_1.RecaptchaConfigRef,
        google_recaptcha_validator_1.GoogleRecaptchaValidator,
        google_recaptcha_enterprise_validator_1.GoogleRecaptchaEnterpriseValidator])
], RecaptchaValidatorResolver);
exports.RecaptchaValidatorResolver = RecaptchaValidatorResolver;
